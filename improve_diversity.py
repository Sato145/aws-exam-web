#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
問題の多様性を改善するスクリプト
"""

def create_diverse_questions():
    """より多様な問題テンプレートを作成"""
    
    # 100種類の異なる問題テンプレート
    diverse_templates = [
        # EC2関連 (1-15)
        ("EC2インスタンスのメタデータサービスにアクセスするためのIPアドレスはどれか。", ["169.254.169.254", "192.168.1.1", "10.0.0.1", "172.16.0.1"], 0, "EC2インスタンスメタデータサービスは、169.254.169.254のリンクローカルアドレスでアクセスできます。"),
        ("EC2インスタンスの配置グループの種類として正しくないものはどれか。", ["Cluster", "Partition", "Spread", "Network"], 3, "EC2の配置グループには、Cluster、Partition、Spreadの3種類があります。"),
        ("EC2 Dedicated Hostsの主な利点はどれか。", ["コストの削減", "パフォーマンスの向上", "ライセンス要件への対応", "自動スケーリング"], 2, "Dedicated Hostsは、既存のサーバーバウンドソフトウェアライセンスを使用する際のライセンス要件に対応します。"),
        ("EC2インスタンスの起動時に実行されるスクリプトを指定する機能はどれか。", ["User Data", "Instance Metadata", "Security Groups", "Key Pairs"], 0, "User Dataを使用して、EC2インスタンスの起動時に実行されるスクリプトを指定できます。"),
        ("EC2インスタンスの状態で、課金が停止されるものはどれか。", ["Running", "Stopped", "Stopping", "Pending"], 1, "EC2インスタンスがStopped状態の場合、コンピューティング料金の課金は停止されます。"),
        
        # S3関連 (16-30)
        ("S3バケット名の命名規則として正しくないものはどれか。", ["グローバルで一意である必要がある", "3-63文字の長さ", "大文字を含むことができる", "ピリオドを含むことができる"], 2, "S3バケット名は小文字のみ使用可能で、大文字は使用できません。"),
        ("S3のバージョニング機能について正しい説明はどれか。", ["デフォルトで有効になっている", "同じキーで複数のオブジェクトバージョンを保存できる", "無料で利用できる", "一度有効にすると無効にできない"], 1, "S3バージョニングを有効にすると、同じキーで複数のオブジェクトバージョンを保存できます。"),
        ("S3 Cross-Region Replicationの要件として正しいものはどれか。", ["同じリージョン内でのみ可能", "バージョニングが有効である必要がある", "パブリックアクセスが必要", "暗号化が無効である必要がある"], 1, "Cross-Region Replicationを使用するには、ソースとデスティネーションの両方のバケットでバージョニングが有効である必要があります。"),
        ("S3 Intelligent-Tieringの説明として正しいものはどれか。", ["手動でアクセスパターンを設定する必要がある", "アクセスパターンに基づいて自動的にストレージクラスを最適化する", "追加料金は発生しない", "Glacier Deep Archiveにも移行できる"], 1, "S3 Intelligent-Tieringは、アクセスパターンを監視して自動的に最適なストレージクラスに移行します。"),
        ("S3のマルチパートアップロードの最小パートサイズはどれか。", ["1MB", "5MB", "10MB", "100MB"], 1, "S3マルチパートアップロードでは、最後のパートを除いて各パートは最小5MBである必要があります。"),
        
        # RDS関連 (31-45)
        ("Amazon RDSで自動バックアップが実行される時間帯はどれか。", ["常に固定時間", "ユーザーが指定したバックアップウィンドウ", "ランダムな時間", "ピーク時間を避けて自動選択"], 1, "RDSの自動バックアップは、ユーザーが指定したバックアップウィンドウ内で実行されます。"),
        ("RDS Read Replicaの制限として正しいものはどれか。", ["読み取り専用アクセスのみ", "同じリージョン内でのみ作成可能", "1つのマスターDBに対して1つのみ作成可能", "自動フェイルオーバー機能がある"], 0, "Read Replicaは読み取り専用で、書き込み操作はマスターDBでのみ実行できます。"),
        ("Amazon Auroraの特徴として正しくないものはどれか。", ["MySQL・PostgreSQLと互換性がある", "ストレージが自動的にスケールする", "NoSQLデータベースである", "高可用性を提供する"], 2, "Amazon Auroraは、MySQL・PostgreSQL互換のリレーショナルデータベースです。"),
        ("RDSのメンテナンスウィンドウで実行される作業として正しくないものはどれか。", ["OSパッチの適用", "データベースエンジンのアップグレード", "アプリケーションコードの更新", "セキュリティパッチの適用"], 2, "メンテナンスウィンドウでは、インフラレベルの更新が行われますが、アプリケーションコードの更新は含まれません。"),
        ("RDSのパフォーマンスインサイトで監視できる項目として正しくないものはどれか。", ["CPU使用率", "データベース接続数", "アプリケーションのレスポンス時間", "待機イベント"], 2, "パフォーマンスインサイトは、データベースレベルのメトリクスを監視しますが、アプリケーションレベルのレスポンス時間は監視しません。"),
        
        # Lambda・サーバーレス関連 (46-60)
        ("AWS Lambda関数のメモリ設定の範囲はどれか。", ["128MB - 1GB", "128MB - 3GB", "128MB - 10GB", "256MB - 3GB"], 2, "Lambda関数のメモリは、128MBから10,240MB（10GB）まで設定できます。"),
        ("Lambda関数の同時実行数のデフォルト制限はどれか。", ["100", "500", "1000", "制限なし"], 2, "Lambda関数の同時実行数のデフォルト制限は、リージョンあたり1000です。"),
        ("Lambda Layersの主な用途はどれか。", ["関数のパフォーマンス向上", "共通ライブラリやコードの共有", "セキュリティの強化", "コストの削減"], 1, "Lambda Layersは、複数の関数間で共通のライブラリやコードを共有するために使用されます。"),
        ("AWS Step Functionsのワークフロー定義に使用される言語はどれか。", ["JSON", "YAML", "Amazon States Language (ASL)", "XML"], 2, "Step Functionsでは、Amazon States Language（ASL）というJSON形式の言語を使用してワークフローを定義します。"),
        ("Lambda関数の環境変数について正しい説明はどれか。", ["実行時に変更可能", "デプロイ時に設定され、実行時は読み取り専用", "暗号化できない", "最大10個まで設定可能"], 1, "Lambda関数の環境変数は、デプロイ時に設定され、実行時は読み取り専用です。"),
        
        # セキュリティ関連 (61-75)
        ("AWS GuardDutyが検出する脅威の種類として正しくないものはどれか。", ["不正なAPIコール", "マルウェア感染", "アプリケーションの脆弱性", "異常なネットワーク通信"], 2, "GuardDutyは、ネットワークレベルやAPIレベルの脅威を検出しますが、アプリケーションの脆弱性は検出しません。"),
        ("AWS Security Hubの主な機能はどれか。", ["セキュリティ脅威の自動修復", "セキュリティ検出結果の一元管理", "ネットワークトラフィックの監視", "アクセス権限の管理"], 1, "Security Hubは、複数のセキュリティサービスからの検出結果を一元的に管理・表示するサービスです。"),
        ("AWS KMSのカスタマーマネージドキーの特徴として正しくないものはどれか。", ["キーの作成・管理が可能", "キーローテーションの設定が可能", "無料で利用できる", "キーポリシーの設定が可能"], 2, "カスタマーマネージドキーは有料サービスで、キーの使用量に応じて料金が発生します。"),
        ("AWS WAFの主な機能はどれか。", ["データベースの暗号化", "Webアプリケーションの脆弱性攻撃からの保護", "ネットワーク帯域幅の制御", "サーバーの自動スケーリング"], 1, "AWS WAFは、SQLインジェクション、クロスサイトスクリプティングなどのWebアプリケーション攻撃からの保護を提供します。"),
        ("AWS Shieldの説明として正しいものはどれか。", ["データ暗号化サービス", "DDoS攻撃からの保護サービス", "ウイルス対策サービス", "ファイアウォールサービス"], 1, "AWS ShieldはDDoS攻撃からAWSリソースを保護するマネージドサービスです。"),
        
        # 高度なサービス関連 (76-90)
        ("Amazon SageMakerの主な用途はどれか。", ["Webアプリケーションのホスティング", "機械学習モデルの構築・訓練・デプロイ", "データベースの管理", "ネットワークの監視"], 1, "Amazon SageMakerは、機械学習モデルの構築、訓練、デプロイを行うフルマネージドサービスです。"),
        ("AWS Glueの説明として正しいものはどれか。", ["データベース管理サービス", "ETL（Extract, Transform, Load）サービス", "ファイル転送サービス", "バックアップサービス"], 1, "AWS Glueは、データの抽出、変換、ロードを行うフルマネージドETLサービスです。"),
        ("Amazon Athenaでクエリできるデータソースとして正しくないものはどれか。", ["Amazon S3", "Amazon DynamoDB", "Amazon RDS", "AWS CloudTrail logs"], 2, "Athenaは主にS3上のデータに対してクエリを実行しますが、RDSに直接クエリすることはできません。"),
        ("Amazon QuickSightの主な機能はどれか。", ["データベース管理", "ビジネスインテリジェンス・データ可視化", "機械学習モデル訓練", "ネットワーク監視"], 1, "Amazon QuickSightは、ビジネスインテリジェンスとデータ可視化のためのサービスです。"),
        ("Amazon Comprehendの機能はどれか。", ["画像認識", "自然言語処理", "音声認識", "動画解析"], 1, "Amazon Comprehendは、自然言語処理（NLP）を行うサービスです。"),
        
        # アーキテクチャ関連 (91-100)
        ("マイクロサービスアーキテクチャの特徴として正しくないものはどれか。", ["サービスの独立性", "単一のデータベース使用", "個別デプロイ可能", "技術スタックの多様性"], 1, "マイクロサービスでは、各サービスが独自のデータベースを持つことが推奨されます。"),
        ("「Infrastructure as Code (IaC)」の利点として正しくないものはどれか。", ["設定の一貫性", "バージョン管理", "手動作業の削減", "ハードウェアコストの削減"], 3, "IaCは、インフラの管理を自動化・標準化しますが、直接的なハードウェアコスト削減が主な目的ではありません。"),
        ("「Serverless」アーキテクチャの特徴として正しいものはどれか。", ["サーバーが存在しない", "サーバー管理が不要", "常時稼働するサーバー", "物理サーバーのみ使用"], 1, "Serverlessは、ユーザーがサーバー管理を行う必要がないアーキテクチャです。"),
        ("「Blue-Green Deployment」の利点はどれか。", ["コストの削減", "ダウンタイムの最小化", "開発速度の向上", "セキュリティの強化"], 1, "Blue-Green Deploymentは、2つの同一環境を使用してダウンタイムを最小化するデプロイ戦略です。"),
        ("AWS Well-Architected Frameworkの5つの柱すべてに共通する重要な概念はどれか。", ["コスト削減", "継続的改善", "技術的複雑性", "ベンダーロックイン"], 1, "Well-Architected Frameworkでは、すべての柱において継続的改善が重要な概念として強調されています。")
    ]
    
    return diverse_templates

if __name__ == "__main__":
    templates = create_diverse_questions()
    print(f"作成された問題テンプレート数: {len(templates)}")
    
    # 重複チェック
    questions = [t[0] for t in templates]
    unique_questions = set(questions)
    print(f"ユニークな問題数: {len(unique_questions)}")
    print(f"重複数: {len(questions) - len(unique_questions)}")
    
    # 最初の5問を表示
    for i, (q, choices, answer, explanation) in enumerate(templates[:5], 1):
        print(f"{i}. {q}")
        print(f"   正解: {choices[answer]}")
        print(f"   解説: {explanation[:50]}...")
        print()